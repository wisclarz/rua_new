rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user owns the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // ==================== USERS COLLECTION ====================
    match /users/{userId} {
      // Allow read and write only if user is the owner
      allow read, write: if isOwner(userId);

      // Allow user to create their own document on first login
      allow create: if isAuthenticated() && request.auth.uid == userId;

      // ✅ Allow user to delete their own account
      allow delete: if isOwner(userId);
    }

    // ==================== DREAMS COLLECTION ====================
    match /dreams/{dreamId} {
      // Allow read if user is the owner
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;

      // Allow create if user is authenticated and userId matches
      allow create: if isAuthenticated() &&
                      request.resource.data.userId == request.auth.uid &&
                      request.resource.data.keys().hasAll(['userId', 'dreamText', 'createdAt', 'status']);

      // Allow update if user is the owner
      allow update: if isAuthenticated() &&
                      resource.data.userId == request.auth.uid &&
                      request.resource.data.userId == request.auth.uid;

      // ✅ Allow delete if user is the owner (for account deletion)
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // ==================== DREAM ANALYSES COLLECTION ====================
    // If you use a separate dream_analyses collection
    match /dream_analyses/{analysisId} {
      // Allow read if user is the owner
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;

      // Allow create if user is authenticated and userId matches
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;

      // Allow update if user is the owner
      allow update: if isAuthenticated() &&
                      resource.data.userId == request.auth.uid &&
                      request.resource.data.userId == request.auth.uid;

      // ✅ Allow delete if user is the owner (for account deletion)
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // ==================== SUBSCRIPTIONS COLLECTION ====================
    match /subscriptions/{userId} {
      // Allow read if user is the owner
      allow read: if isOwner(userId);

      // Allow create on first subscription
      allow create: if isAuthenticated() &&
                      request.auth.uid == userId &&
                      request.resource.data.userId == userId &&
                      request.resource.data.keys().hasAll(['userId', 'plan', 'startDate', 'isActive']);

      // Allow update only if user is the owner
      // This allows updating subscription when purchasing
      allow update: if isOwner(userId) &&
                      request.resource.data.userId == userId;

      // ✅ Allow delete when user deletes their account
      allow delete: if isOwner(userId);
    }

    // ==================== USER STATS COLLECTION ====================
    match /user_stats/{userId} {
      // Allow read and write if user is the owner
      allow read, write: if isOwner(userId);

      // Allow create if user is authenticated
      allow create: if isAuthenticated() && request.auth.uid == userId;

      // ✅ Allow delete when user deletes their account
      allow delete: if isOwner(userId);
    }

    // ==================== USER PREFERENCES COLLECTION ====================
    match /user_preferences/{userId} {
      // Allow read and write if user is the owner
      allow read, write: if isOwner(userId);

      // Allow create if user is authenticated
      allow create: if isAuthenticated() && request.auth.uid == userId;

      // ✅ Allow delete when user deletes their account
      allow delete: if isOwner(userId);
    }

    // ==================== ANALYTICS COLLECTION (Optional) ====================
    match /analytics/{document=**} {
      // Only allow reads (analytics are written by Cloud Functions or Admin SDK)
      allow read: if isAuthenticated();
      allow write: if false;
    }

    // ==================== DEFAULT DENY ====================
    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
